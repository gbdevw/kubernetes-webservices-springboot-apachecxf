# Create a dedicated namespace for all resources
apiVersion: v1
kind: Namespace
metadata:
  name: k8s-ws-sboot-cxf-gb
---
# Create a headless service to resolve webservice application pods
apiVersion: v1
kind: Service
metadata:
  name: webservices-headless-service
  namespace: k8s-ws-sboot-cxf-gb
  labels:
    app: k8s-ws-sboot-cxf
    component: webservices
spec:
  ports:
  - port : 8080
    targetPort: 8080
  selector:
    app: k8s-ws-sboot-cxf
    component: webservices
---
# Deployment for the pods that embody the webservice application
# 4 replicas
# Rolling update
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webservices-deployment
  namespace: k8s-ws-sboot-cxf-gb
spec:
  selector:
    matchLabels:
      app: k8s-ws-sboot-cxf
      component: webservices
  replicas: 4
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  template:
    metadata:
      namespace: k8s-ws-sboot-cxf-gb
      labels:
        app: k8s-ws-sboot-cxf
        component: webservices
    spec:
      containers:
      - name: webservices-application
        image: guillaumebraibant/k8s-ws-sboot-cxf:1.0.0
        ports:
        - containerPort: 8080
---
# NodePort service to allow remote access (from outside your K8S cluster) to the webservices
# Port used : 31001
apiVersion: v1
kind: Service
metadata:
    name: webservices-proxy
    namespace: k8s-ws-sboot-cxf-gb
    labels:
        app: k8s-ws-sboot-cxf
        component: webservices-proxy
spec:
    type: NodePort
    ports:
      - name: http
        nodePort: 31001
        port: 8080
        protocol: TCP
    selector:
      app: k8s-ws-sboot-cxf
      component: webservices